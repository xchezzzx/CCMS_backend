// <auto-generated />
using System;
using ASPNETCore.DataAccess.Models.DBModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASPNETCore.Migrations
{
    [DbContext(typeof(CCMSContext))]
    [Migration("20230802154309_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date_time");

                    b.Property<string>("Hashtag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("hashtag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("NumberConcTasks")
                        .HasColumnType("int")
                        .HasColumnName("number_conc_tasks");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date_time");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("state_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StateId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("competition", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.CompetitionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("competition_state", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BonusContent")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("bonus_content");

                    b.Property<int?>("BonusPoints")
                        .HasColumnType("int")
                        .HasColumnName("bonus_points");

                    b.Property<TimeSpan?>("BonusTimeframe")
                        .HasColumnType("time")
                        .HasColumnName("bonus_timeframe");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<int>("Fine")
                        .HasColumnType("int")
                        .HasColumnName("fine");

                    b.Property<bool>("IfHasBonus")
                        .HasColumnType("bit")
                        .HasColumnName("if_has_bonus");

                    b.Property<int>("LangId")
                        .HasColumnType("int")
                        .HasColumnName("lang_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("platform_id");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<TimeSpan>("Timeframe")
                        .HasColumnType("time")
                        .HasColumnName("timeframe");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("LangId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("exercise", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("exercise_category", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("exercise_lang", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisePlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("exercise_platform", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("exercise_state", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisesToCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("competition_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("exercises_to_competition", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisesToTeamToCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApprovedPoints")
                        .HasColumnType("int")
                        .HasColumnName("approved_points");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("comment");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("competition_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int>("ExerciseStateId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_state_id");

                    b.Property<string>("FileLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("file_link");

                    b.Property<string>("SolutionLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("solution_link");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<TimeSpan?>("SubmitDuration")
                        .HasColumnType("time")
                        .HasColumnName("submit_duration");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime")
                        .HasColumnName("submit_time");

                    b.Property<DateTime>("TakeTime")
                        .HasColumnType("datetime")
                        .HasColumnName("take_time");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<TimeSpan>("Timeframe")
                        .HasColumnType("time")
                        .HasColumnName("timeframe");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ExerciseStateId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("exercises_to_teams", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisesToUsersToCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("competition_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserId");

                    b.ToTable("exercises_to_users_to_competitions", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.OperatorsToCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("competition_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserId");

                    b.ToTable("operators_to_competitions", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("image")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int?>("SumPoints")
                        .HasColumnType("int")
                        .HasColumnName("sum_points");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.TeamsToCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("competition_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int?>("TakenTasks")
                        .HasColumnType("int")
                        .HasColumnName("taken_tasks");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int?>("TeamPoints")
                        .HasColumnType("int")
                        .HasColumnName("team_points");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("teams_to_competitions", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<int?>("CurrentCompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("current_competition_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("password");

                    b.Property<int?>("PointsSummary")
                        .HasColumnType("int")
                        .HasColumnName("points_summary");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("CurrentCompetitionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.UsersToTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit")
                        .HasColumnName("is_captain");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("update_user_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserId");

                    b.ToTable("users_to_teams", (string)null);
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Competition", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("CompetitionCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competition_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.CompetitionState", "State")
                        .WithMany("Competitions")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_competition_competition_state");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("Competitions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_competition_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("CompetitionUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competition_user_modify");

                    b.Navigation("CreateUser");

                    b.Navigation("State");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Exercise", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.ExerciseCategory", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_task_category");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("ExerciseCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_task_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.ExerciseLang", "Lang")
                        .WithMany("Exercises")
                        .HasForeignKey("LangId")
                        .IsRequired()
                        .HasConstraintName("FK_task_lang");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.ExercisePlatform", "Platform")
                        .WithMany("Exercises")
                        .HasForeignKey("PlatformId")
                        .IsRequired()
                        .HasConstraintName("FK_task_platform");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("Exercises")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_task_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("ExerciseUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_task_user_update");

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("Lang");

                    b.Navigation("Platform");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseCategory", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("ExerciseCategoryCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_category_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("ExerciseCategories")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_category_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("ExerciseCategoryUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_category_user_update");

                    b.Navigation("CreateUser");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseLang", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("ExerciseLangCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_lang_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("ExerciseLangs")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_lang_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("ExerciseLangUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_lang_user_update");

                    b.Navigation("CreateUser");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisePlatform", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("ExercisePlatformCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_platform_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("ExercisePlatforms")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_platform_status_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("ExercisePlatformUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercise_platform_user_update");

                    b.Navigation("CreateUser");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisesToCompetition", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Competition", "Competition")
                        .WithMany("ExercisesToCompetitions")
                        .HasForeignKey("CompetitionId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_competition_competition");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("ExercisesToCompetitionCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_competition_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Exercise", "Exercise")
                        .WithMany("ExercisesToCompetitions")
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_competition_exercise");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("ExercisesToCompetitions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_competition_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("ExercisesToCompetitionUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_competition_user_update");

                    b.Navigation("Competition");

                    b.Navigation("CreateUser");

                    b.Navigation("Exercise");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisesToTeamToCompetition", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Competition", "Competition")
                        .WithMany("ExercisesToTeams")
                        .HasForeignKey("CompetitionId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_teams_competition");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("ExercisesToTeamCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_tasks_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Exercise", "Exercise")
                        .WithMany("ExercisesToTeams")
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_tasks_task");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.ExerciseState", "ExerciseState")
                        .WithMany("ExercisesToTeams")
                        .HasForeignKey("ExerciseStateId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_tasks_task_state");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("ExercisesToTeams")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_tasks_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Team", "Team")
                        .WithMany("ExercisesToTeams")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_tasks_team");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("ExercisesToTeamUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_tasks_user_update");

                    b.Navigation("Competition");

                    b.Navigation("CreateUser");

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseState");

                    b.Navigation("Status");

                    b.Navigation("Team");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisesToUsersToCompetition", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Competition", "Competition")
                        .WithMany("ExercisesToUsersToCompetitions")
                        .HasForeignKey("CompetitionId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_users_to_competitions_competition");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("ExercisesToUsersToCompetitionCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_users_to_competitions_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Exercise", "Exercise")
                        .WithMany("ExercisesToUsersToCompetitions")
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_users_exercise");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("ExercisesToUsersToCompetitions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_users_to_competitions_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("ExercisesToUsersToCompetitionUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_users_to_competitions_user_update");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "User")
                        .WithMany("ExercisesToUsersToCompetitionUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_exercises_to_users_user");

                    b.Navigation("Competition");

                    b.Navigation("CreateUser");

                    b.Navigation("Exercise");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.OperatorsToCompetition", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Competition", "Competition")
                        .WithMany("OperatorsToCompetitions")
                        .HasForeignKey("CompetitionId")
                        .IsRequired()
                        .HasConstraintName("FK_operators_to_competitions_competition");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("OperatorsToCompetitionCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_operators_to_competitions_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("OperatorsToCompetitions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_operators_to_competitions_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("OperatorsToCompetitionUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_operators_to_competitions_user_update");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "User")
                        .WithMany("OperatorsToCompetitionUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_operators_to_competitions_user");

                    b.Navigation("Competition");

                    b.Navigation("CreateUser");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Team", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("TeamCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_team_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("Teams")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_team_team_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("TeamUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_team_user_update");

                    b.Navigation("CreateUser");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.TeamsToCompetition", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Competition", "Competition")
                        .WithMany("TeamsToCompetitions")
                        .HasForeignKey("CompetitionId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_competition");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("TeamsToCompetitionCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("TeamsToCompetitions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Team", "Team")
                        .WithMany("TeamsToCompetitions")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_team");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("TeamsToCompetitionUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_user_update");

                    b.Navigation("Competition");

                    b.Navigation("CreateUser");

                    b.Navigation("Status");

                    b.Navigation("Team");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.User", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("InverseCreateUser")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Competition", "CurrentCompetition")
                        .WithMany("Users")
                        .HasForeignKey("CurrentCompetitionId")
                        .HasConstraintName("FK_user_competition");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_user_user_role");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_user_user_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("InverseUpdateUser")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_user_update");

                    b.Navigation("CreateUser");

                    b.Navigation("CurrentCompetition");

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.UsersToTeam", b =>
                {
                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "CreateUser")
                        .WithMany("UsersToTeamCreateUsers")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_users_user_create");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Status", "Status")
                        .WithMany("UsersToTeams")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_users_status");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.Team", "Team")
                        .WithMany("UsersToTeams")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_users_team");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "UpdateUser")
                        .WithMany("UsersToTeamUpdateUsers")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_users_user_update");

                    b.HasOne("ASPNETCore.DataAccess.Models.DBModels.User", "User")
                        .WithMany("UsersToTeamUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_competitions_to_teams_to_users_user");

                    b.Navigation("CreateUser");

                    b.Navigation("Status");

                    b.Navigation("Team");

                    b.Navigation("UpdateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Competition", b =>
                {
                    b.Navigation("ExercisesToCompetitions");

                    b.Navigation("ExercisesToTeams");

                    b.Navigation("ExercisesToUsersToCompetitions");

                    b.Navigation("OperatorsToCompetitions");

                    b.Navigation("TeamsToCompetitions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.CompetitionState", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Exercise", b =>
                {
                    b.Navigation("ExercisesToCompetitions");

                    b.Navigation("ExercisesToTeams");

                    b.Navigation("ExercisesToUsersToCompetitions");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseCategory", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseLang", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExercisePlatform", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.ExerciseState", b =>
                {
                    b.Navigation("ExercisesToTeams");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Status", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("ExerciseCategories");

                    b.Navigation("ExerciseLangs");

                    b.Navigation("ExercisePlatforms");

                    b.Navigation("Exercises");

                    b.Navigation("ExercisesToCompetitions");

                    b.Navigation("ExercisesToTeams");

                    b.Navigation("ExercisesToUsersToCompetitions");

                    b.Navigation("OperatorsToCompetitions");

                    b.Navigation("Teams");

                    b.Navigation("TeamsToCompetitions");

                    b.Navigation("Users");

                    b.Navigation("UsersToTeams");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.Team", b =>
                {
                    b.Navigation("ExercisesToTeams");

                    b.Navigation("TeamsToCompetitions");

                    b.Navigation("UsersToTeams");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.User", b =>
                {
                    b.Navigation("CompetitionCreateUsers");

                    b.Navigation("CompetitionUpdateUsers");

                    b.Navigation("ExerciseCategoryCreateUsers");

                    b.Navigation("ExerciseCategoryUpdateUsers");

                    b.Navigation("ExerciseCreateUsers");

                    b.Navigation("ExerciseLangCreateUsers");

                    b.Navigation("ExerciseLangUpdateUsers");

                    b.Navigation("ExercisePlatformCreateUsers");

                    b.Navigation("ExercisePlatformUpdateUsers");

                    b.Navigation("ExerciseUpdateUsers");

                    b.Navigation("ExercisesToCompetitionCreateUsers");

                    b.Navigation("ExercisesToCompetitionUpdateUsers");

                    b.Navigation("ExercisesToTeamCreateUsers");

                    b.Navigation("ExercisesToTeamUpdateUsers");

                    b.Navigation("ExercisesToUsersToCompetitionCreateUsers");

                    b.Navigation("ExercisesToUsersToCompetitionUpdateUsers");

                    b.Navigation("ExercisesToUsersToCompetitionUsers");

                    b.Navigation("InverseCreateUser");

                    b.Navigation("InverseUpdateUser");

                    b.Navigation("OperatorsToCompetitionCreateUsers");

                    b.Navigation("OperatorsToCompetitionUpdateUsers");

                    b.Navigation("OperatorsToCompetitionUsers");

                    b.Navigation("TeamCreateUsers");

                    b.Navigation("TeamUpdateUsers");

                    b.Navigation("TeamsToCompetitionCreateUsers");

                    b.Navigation("TeamsToCompetitionUpdateUsers");

                    b.Navigation("UsersToTeamCreateUsers");

                    b.Navigation("UsersToTeamUpdateUsers");

                    b.Navigation("UsersToTeamUsers");
                });

            modelBuilder.Entity("ASPNETCore.DataAccess.Models.DBModels.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
